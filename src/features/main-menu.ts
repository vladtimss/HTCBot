import { Bot, InlineKeyboard } from "grammy";
import { MyContext } from "../types/grammy-context";
import { fetchUpcomingEvents, formatEvent } from "../services/calendar";

/** —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤—ã, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ app.ts –±–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö import().then */
export function mainMenuKeyboard(ctx: MyContext) {
	const kb = new InlineKeyboard()
		.text("‚õ™ –í–æ—Å–∫—Ä–µ—Å–Ω–æ–µ –±–æ–≥–æ—Å–ª—É–∂–µ–Ω–∏–µ", "nav:sunday")
		.row()
		.text("üë• –ú–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã", "nav:groups")
		.row()
		.text("üóìÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∏ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏—è", "nav:next3")
		.row()
		.text("üôå –ö—Ç–æ –º—ã", "nav:about");

	if (ctx.canSeeFourthButton) {
		kb.row().text("‚≠ê –ü—Ä–µ—Å–≤–∏—Ç–µ—Ä—Å–∫–∏–π —Å–æ–≤–µ—Ç", "nav:pro");
	}
	return kb;
}

export function registerMainMenu(bot: Bot<MyContext>) {
	bot.callbackQuery("nav:main", async (ctx) => {
		ctx.session.menuStack = ["main"];
		await ctx.editMessageText("*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*", {
			parse_mode: "Markdown",
			reply_markup: mainMenuKeyboard(ctx),
		});
	});

	// –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è "—á–µ—Ç–≤–µ—Ä—Ç–æ–π –∫–Ω–æ–ø–∫–∏"
	bot.callbackQuery("nav:pro", async (ctx) => {
		if (!ctx.canSeeFourthButton) {
			return ctx.answerCallbackQuery({ text: "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert: true });
		}
		ctx.session.menuStack.push("pro");
		const kb = new InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "nav:back").text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "nav:main");

		await ctx.editMessageText("*–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏*\n\n–ó–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–ª—É–∂–∏—Ç–µ–ª–µ–π.", {
			parse_mode: "Markdown",
			reply_markup: kb,
		});
	});

	// –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê: –ø–æ–∫–∞–∑–∞—Ç—å 3 –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
	bot.callbackQuery("nav:next3", async (ctx) => {
		// –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ —Ä–æ–ª—è–º ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º
		ctx.session.menuStack.push("next3");

		// –≤–∞–∂–Ω–æ: –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª ¬´—á–∞—Å–∏–∫–∏¬ª
		await ctx.answerCallbackQuery().catch(() => {});

		const events = await fetchUpcomingEvents(3);
		if (events.length === 0) {
			return ctx.editMessageText("–ë–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", {
				reply_markup: new InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "nav:back").text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "nav:main"),
			});
		}

		const text = events.map(formatEvent).join("\n\n");
		await ctx.editMessageText(`*–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:*\n\n${text}`, {
			parse_mode: "Markdown",
			reply_markup: new InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "nav:back").text("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "nav:main"),
		});
	});
}
