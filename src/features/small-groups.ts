import { Bot, InlineKeyboard } from "grammy";
import { MyContext } from "../types/grammy-context";
import {
	GROUPS,
	WEEKDAYS_PRESENT,
	WEEKDAY_TITLE,
	DISTRICTS,
	Weekday,
	SmallGroup,
	DISTRICT_MAP,
} from "../data/small-groups";
import { replyGroupsMenu, replyMainKeyboard } from "../utils/keyboards";
import { MENU_LABELS } from "./main-menu";
import { fetchLmEventsUntilSeasonEnd, fetchUpcomingEvents, formatEvent } from "../services/calendar";

// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–¥–Ω—É –≥—Ä—É–ø–ø—É
function formatGroup(g: SmallGroup): string {
	const leaders = g.leaders.map((l) => `üë§ ${l.firstName} ‚Äî ${l.phone}`).join("\n");
	const addresses = g.addresses.map((a) => `üìç <a href="${a.mapUrl}">${a.address}</a>`).join("\n");
	return `<b>${g.title}</b>\nüóì ${WEEKDAY_TITLE[g.weekday]}, –Ω–∞—á–∞–ª–æ –≤ ${g.time}\n${addresses}\n${leaders}`;
}

export function registerSmallGroups(bot: Bot<MyContext>) {
	// –í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª ‚Äî —à–∏—Ä–æ–∫–∏–µ reply-–∫–Ω–æ–ø–∫–∏
	bot.hears(MENU_LABELS.GROUPS, async (ctx) => {
		await ctx.reply("*–ú–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã*", {
			parse_mode: "Markdown",
			reply_markup: replyGroupsMenu,
		});
	});

	// Reply: ¬´–ü–æ –¥–Ω—è–º¬ª -> inline-—Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π
	bot.hears("üìÖ –ü–æ –¥–Ω—è–º", async (ctx) => {
		const kb = new InlineKeyboard();
		WEEKDAYS_PRESENT.forEach((d) => kb.text(WEEKDAY_TITLE[d], `groups:day:${d}`).row());

		await ctx.reply("*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:*", {
			parse_mode: "Markdown",
			reply_markup: kb,
		});
	});

	// Reply: ¬´–ü–æ —Ä–∞–π–æ–Ω–∞–º¬ª -> inline-—Å–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤
	bot.hears("üìç –ü–æ —Ä–∞–π–æ–Ω–∞–º", async (ctx) => {
		const kb = new InlineKeyboard();
		DISTRICTS.forEach((districtKey) => {
			const districtName = DISTRICT_MAP[districtKey] ?? districtKey;
			kb.text(districtName, `groups:district:${districtKey}`).row();
		});

		await ctx.reply("*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:*", {
			parse_mode: "Markdown",
			reply_markup: kb,
		});
	});

	// Inline: –≤—ã–±–æ—Ä –¥–Ω—è -> —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (–∫–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
	bot.callbackQuery(/groups:day:(MON|TUE|WED|THU|FRI|SAT|SUN)/, async (ctx) => {
		const day = ctx.match![1] as Weekday;
		await ctx.answerCallbackQuery().catch(() => {});
		const list = GROUPS.filter((g) => g.weekday === day);

		// 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
		await ctx.editMessageText(`<b>${WEEKDAY_TITLE[day]} ‚Äî –≥—Ä—É–ø–ø—ã:</b>`, {
			parse_mode: "HTML",
			link_preview_options: { is_disabled: true },
		});

		// 2) –ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º; –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É
		for (let i = 0; i < list.length; i++) {
			const g = list[i];
			const isLast = i === list.length - 1;

			await ctx.reply(formatGroup(g), {
				parse_mode: "HTML",
				link_preview_options: { is_disabled: true },
				reply_markup: isLast ? new InlineKeyboard().text("‚¨ÖÔ∏è –ö –¥–Ω—è–º", "groups:byday") : undefined,
			});
		}
	});

	// Inline: –≤–µ—Ä–Ω—É—Ç—å –∫ —Å–ø–∏—Å–∫—É –¥–Ω–µ–π
	bot.callbackQuery("groups:byday", async (ctx) => {
		await ctx.answerCallbackQuery().catch(() => {});
		const kb = new InlineKeyboard();
		WEEKDAYS_PRESENT.forEach((d) => kb.text(WEEKDAY_TITLE[d], `groups:day:${d}`).row());

		await ctx.editMessageText("*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:*", {
			parse_mode: "HTML",
			reply_markup: kb,
		});
	});

	// Inline: –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ -> —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø (–∫–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
	bot.callbackQuery(/groups:district:(.+)/, async (ctx) => {
		const districtKey = ctx.match![1];
		const districtName = DISTRICT_MAP[districtKey] ?? districtKey;

		await ctx.answerCallbackQuery().catch(() => {});
		const list = GROUPS.filter((g) => g.region === districtKey);

		// 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
		await ctx.editMessageText(`<b>${districtName} ‚Äî –≥—Ä—É–ø–ø—ã:</b>`, {
			parse_mode: "HTML",
			link_preview_options: { is_disabled: true },
		});

		// 2) –ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º; –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É
		for (let i = 0; i < list.length; i++) {
			const g = list[i];
			const isLast = i === list.length - 1;

			await ctx.reply(formatGroup(g), {
				parse_mode: "HTML",
				link_preview_options: { is_disabled: true },
				reply_markup: isLast ? new InlineKeyboard().text("‚¨ÖÔ∏è –ö —Ä–∞–π–æ–Ω–∞–º", "groups:bydistrict") : undefined,
			});
		}
	});

	// Inline: –≤–µ—Ä–Ω—É—Ç—å –∫ —Å–ø–∏—Å–∫—É —Ä–∞–π–æ–Ω–æ–≤
	bot.callbackQuery("groups:bydistrict", async (ctx) => {
		await ctx.answerCallbackQuery().catch(() => {});
		const kb = new InlineKeyboard();
		DISTRICTS.forEach((districtKey) => {
			const districtName = DISTRICT_MAP[districtKey] ?? districtKey;
			kb.text(districtName, `groups:district:${districtKey}`).row();
		});

		await ctx.editMessageText("*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:*", {
			parse_mode: "HTML",
			reply_markup: kb,
		});
	});

	// Inline: ¬´–∫ —Ä–∞–∑–¥–µ–ª—É ‚Äû–ú–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã‚Äú¬ª ‚Äî –≤–µ—Ä–Ω—ë–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ä–∞–∑–¥–µ–ª–∞
	bot.callbackQuery("groups:root", async (ctx) => {
		await ctx.answerCallbackQuery().catch(() => {});
		await ctx.reply("*–ú–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã*", {
			parse_mode: "HTML",
			reply_markup: replyGroupsMenu,
		});
	});

	// Inline: –≥–ª–æ–±–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ
	bot.callbackQuery("nav:main", async (ctx) => {
		await ctx.answerCallbackQuery().catch(() => {});
		await ctx.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", { reply_markup: replyMainKeyboard });
	});

	// –ö–Ω–æ–ø–∫–∞: –∫–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞ –õ–ú–ì
	bot.hears("üìÖ –ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞ –õ–ú–ì", async (ctx) => {
		const events = await fetchLmEventsUntilSeasonEnd();
		const nextLm = events[0]; // –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ ‚Äî –±–ª–∏–∂–∞–π—à–∏–π

		if (!nextLm) {
			await ctx.reply("üòî –ë–ª–∏–∂–∞–π—à–∏—Ö –≤—Å—Ç—Ä–µ—á –õ–ú–ì –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
			return;
		}

		await ctx.reply(formatEvent(nextLm), { parse_mode: "Markdown" });
	});

	// –ö–Ω–æ–ø–∫–∞: –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –õ–ú–ì –¥–æ –∫–æ–Ω—Ü–∞ —Å–µ–∑–æ–Ω–∞
	bot.hears("üìñ –í—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –õ–ú–ì –¥–æ –∫–æ–Ω—Ü–∞ —Å–µ–∑–æ–Ω–∞", async (ctx) => {
		const lmEvents = await fetchLmEventsUntilSeasonEnd();

		if (lmEvents.length === 0) {
			await ctx.reply("üòî –í —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ –≤—Å—Ç—Ä–µ—á –õ–ú–ì –±–æ–ª—å—à–µ –Ω–µ—Ç.");
			return;
		}

		const list = lmEvents.map(formatEvent).join("\n\n");
		await ctx.reply(`üìñ *–°–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á –õ–ú–ì –¥–æ –∫–æ–Ω—Ü–∞ —Å–µ–∑–æ–Ω–∞:*\n\n${list}`, {
			parse_mode: "Markdown",
		});
	});
}
