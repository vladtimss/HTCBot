import { Bot, InlineKeyboard } from "grammy";
import { MyContext } from "../types/grammy-context";
import {
	GROUPS,
	WEEKDAYS_PRESENT,
	WEEKDAY_TITLE,
	DISTRICTS,
	Weekday,
	SmallGroup,
	DISTRICT_MAP,
} from "../data/small-groups";
import { replyGroupsMenu } from "../utils/keyboards";
import { fetchLmEventsUntilSeasonEnd, formatEvent } from "../services/calendar";
import { MENU_LABELS } from "../constants/button-lables";

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–Ω–æ–π –º–∞–ª–æ–π –≥—Ä—É–ø–ø–µ –≤ –≤–∏–¥–µ HTML-—Ç–µ–∫—Å—Ç–∞
 */
function formatGroup(g: SmallGroup): string {
	const leaders = g.leaders.map((l) => `üë§ ${l.firstName} ‚Äî ${l.phone}`).join("\n");
	const addresses = g.addresses.map((a) => `üìç <a href="${a.mapUrl}">${a.address}</a>`).join("\n");
	return `<b>${g.title}</b>\nüóì ${WEEKDAY_TITLE[g.weekday]}, –Ω–∞—á–∞–ª–æ –≤ ${g.time}\n${addresses}\n${leaders}`;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
 */
function makeWeekdaysKeyboard() {
	const kb = new InlineKeyboard();
	WEEKDAYS_PRESENT.forEach((d) => kb.text(WEEKDAY_TITLE[d], `groups:day:${d}`).row());
	return kb;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞
 */
function makeDistrictsKeyboard() {
	const kb = new InlineKeyboard();
	DISTRICTS.forEach((districtKey) => {
		const districtName = DISTRICT_MAP[districtKey] ?? districtKey;
		kb.text(districtName, `groups:district:${districtKey}`).row();
	});
	return kb;
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ú–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã"
 */
export function registerSmallGroups(bot: Bot<MyContext>) {
	/**
	 * –í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ú–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã¬ª (reply-–∫–Ω–æ–ø–∫–∞)
	 */
	bot.hears(MENU_LABELS.GROUPS, async (ctx) => {
		await ctx.reply("*–ú–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã*", {
			parse_mode: "Markdown",
			reply_markup: replyGroupsMenu,
		});
	});

	/**
	 * ¬´üìÖ –ü–æ –¥–Ω—è–º¬ª ‚Üí —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π (inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
	 */
	bot.hears("üìÖ –ü–æ –¥–Ω—è–º", async (ctx) => {
		await ctx.reply("*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:*", {
			parse_mode: "Markdown",
			reply_markup: makeWeekdaysKeyboard(),
		});
	});

	/**
	 * ¬´üìç –ü–æ —Ä–∞–π–æ–Ω–∞–º¬ª ‚Üí —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤ (inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
	 */
	bot.hears("üìç –ü–æ —Ä–∞–π–æ–Ω–∞–º", async (ctx) => {
		await ctx.reply("*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:*", {
			parse_mode: "Markdown",
			reply_markup: makeDistrictsKeyboard(),
		});
	});

	/**
	 * –í—ã–±–æ—Ä –¥–Ω—è ‚Üí –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
	 */
	bot.callbackQuery(/groups:day:(MON|TUE|WED|THU|FRI|SAT|SUN)/, async (ctx) => {
		const day = ctx.match![1] as Weekday;
		await ctx.answerCallbackQuery().catch(() => {});
		const list = GROUPS.filter((g) => g.weekday === day);

		// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
		await ctx.reply(`<b>${WEEKDAY_TITLE[day]} ‚Äî –≥—Ä—É–ø–ø—ã:</b>`, {
			parse_mode: "HTML",
			link_preview_options: { is_disabled: true },
		});

		// –ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
		for (let i = 0; i < list.length; i++) {
			const g = list[i];
			const isLast = i === list.length - 1;

			await ctx.reply(formatGroup(g), {
				parse_mode: "HTML",
				link_preview_options: { is_disabled: true },
				// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ "–ö –¥–Ω—è–º" –≤–Ω–∏–∑—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
				reply_markup: isLast ? new InlineKeyboard().text("‚¨ÖÔ∏è –ö –¥–Ω—è–º", "groups:byday") : undefined,
			});
		}
	});

	/**
	 * –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –¥–Ω–µ–π
	 */
	bot.callbackQuery("groups:byday", async (ctx) => {
		await ctx.answerCallbackQuery().catch(() => {});
		await ctx.reply("*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:*", {
			parse_mode: "Markdown",
			reply_markup: makeWeekdaysKeyboard(),
		});
	});

	/**
	 * –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ ‚Üí –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ
	 */
	bot.callbackQuery(/groups:district:(.+)/, async (ctx) => {
		const districtKey = ctx.match![1];
		const districtName = DISTRICT_MAP[districtKey] ?? districtKey;

		await ctx.answerCallbackQuery().catch(() => {});
		const list = GROUPS.filter((g) => g.region === districtKey);

		// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞
		await ctx.reply(`<b>${districtName} ‚Äî –≥—Ä—É–ø–ø—ã:</b>`, {
			parse_mode: "HTML",
			link_preview_options: { is_disabled: true },
		});

		// –ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
		for (let i = 0; i < list.length; i++) {
			const g = list[i];
			const isLast = i === list.length - 1;

			await ctx.reply(formatGroup(g), {
				parse_mode: "HTML",
				link_preview_options: { is_disabled: true },
				// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ "–ö —Ä–∞–π–æ–Ω–∞–º" —Ç–æ–ª—å–∫–æ —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
				reply_markup: isLast ? new InlineKeyboard().text("‚¨ÖÔ∏è –ö —Ä–∞–π–æ–Ω–∞–º", "groups:bydistrict") : undefined,
			});
		}
	});

	/**
	 * –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ä–∞–π–æ–Ω–æ–≤
	 */
	bot.callbackQuery("groups:bydistrict", async (ctx) => {
		await ctx.answerCallbackQuery().catch(() => {});
		await ctx.reply("*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:*", {
			parse_mode: "Markdown",
			reply_markup: makeDistrictsKeyboard(),
		});
	});

	/**
	 * –ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞ –õ–ú–ì
	 */
	bot.hears(MENU_LABELS.NEXTLMG, async (ctx) => {
		const events = await fetchLmEventsUntilSeasonEnd();
		const nextLm = events[0];

		if (!nextLm) {
			await ctx.reply("üòî –ë–ª–∏–∂–∞–π—à–∏—Ö –≤—Å—Ç—Ä–µ—á –õ–ú–ì –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
			return;
		}
		await ctx.reply(formatEvent(nextLm), { parse_mode: "Markdown" });
	});

	/**
	 * –í—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –õ–ú–ì –¥–æ –∫–æ–Ω—Ü–∞ —Å–µ–∑–æ–Ω–∞
	 */
	bot.hears(MENU_LABELS.ALL_LMG, async (ctx) => {
		const lmEvents = await fetchLmEventsUntilSeasonEnd();

		if (lmEvents.length === 0) {
			await ctx.reply("üòî –í —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ –≤—Å—Ç—Ä–µ—á –õ–ú–ì –±–æ–ª—å—à–µ –Ω–µ—Ç.");
			return;
		}

		const list = lmEvents.map(formatEvent).join("\n\n");
		await ctx.reply(`üìñ *–°–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á –õ–ú–ì –¥–æ –∫–æ–Ω—Ü–∞ —Å–µ–∑–æ–Ω–∞:*\n\n${list}`, {
			parse_mode: "Markdown",
		});
	});
}
