import { Bot, InlineKeyboard } from "grammy";
import { MyContext } from "../types/grammy-context";
import {
	SMALL_GROUPS,
	WEEKDAYS_PRESENT,
	WEEKDAY_TITLE,
	DISTRICTS,
	Weekday,
	SmallGroup,
	DISTRICT_MAP,
} from "../data/small-groups";
import { COMMON, SMALL_GROUPS_TEXTS } from "../services/texts";
import { inlineLmgTrip, replyGroupsMenu } from "../utils/keyboards";
import {
	fetchAllFutureEventsByTitle,
	fetchHolidayEvent,
	fetchNextEventByTitle,
	formatEvent,
} from "../services/calendar";
import { MENU_LABELS } from "../constants/button-lables";
import { requirePrivileged } from "../utils/guards";
import { withLoading } from "../utils/loading";

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–Ω–æ–π –º–∞–ª–æ–π –≥—Ä—É–ø–ø–µ –≤ –≤–∏–¥–µ ¬´–∫–∞—Ä—Ç–æ—á–∫–∏¬ª (Markdown).
 */
function formatGroup(g: SmallGroup): string {
	const leaders = g.leaders
		.map((l) => {
			if (l.tgUserName) {
				return `üë§ [${l.firstName}](https://t.me/${l.tgUserName})`;
			}
			if (l.tgId) {
				return `üë§ [${l.firstName}](tg://user?id=${l.tgId})`;
			}
			return `üë§ ${l.firstName}`;
		})
		.join("\n");

	const addresses = g.addresses.map((a) => `üìç [${a.address}](${a.mapUrl})`).join("\n");

	return [
		`*‚ú® ${g.title}*`,
		"",
		`üóì _${WEEKDAY_TITLE[g.weekday]}, –Ω–∞—á–∞–ª–æ –≤ ${g.time}_`,
		"",
		addresses,
		"",
		"_(–ù–∞–ø–∏—à–∏—Ç–µ –≤–µ–¥—É—â–∏–º, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ —É—Ç–æ—á–Ω–∏—Ç—å - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è üëá)_\n",
		leaders,
	].join("\n");
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
 */
function makeWeekdaysKeyboard() {
	const kb = new InlineKeyboard();
	WEEKDAYS_PRESENT.forEach((d) => kb.text(WEEKDAY_TITLE[d], `groups:day:${d}`).row());
	return kb;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞
 */
function makeDistrictsKeyboard() {
	const kb = new InlineKeyboard();
	DISTRICTS.forEach((districtKey) => {
		const districtName = DISTRICT_MAP[districtKey] ?? districtKey;
		kb.text(districtName, `groups:district:${districtKey}`).row();
	});
	return kb;
}

/**
 * –†–µ–Ω–¥–µ—Ä –∫–æ—Ä–Ω—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–ú–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã¬ª
 */
async function renderGroupsRoot(ctx: MyContext) {
	ctx.session.menuStack = ["groups"];
	ctx.session.lastSection = "groups";

	const isPrivileged = ctx.access?.isPrivileged;

	await ctx.reply(
		`*${SMALL_GROUPS_TEXTS.title}*\n\n${
			isPrivileged ? SMALL_GROUPS_TEXTS.descriptionForMembers : SMALL_GROUPS_TEXTS.descriptionForOther
		}\n\n${COMMON.useButtonBelow}`,
		{
			parse_mode: "Markdown",
			reply_markup: replyGroupsMenu(ctx),
		}
	);
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ú–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã"
 */
export function registerSmallGroups(bot: Bot<MyContext>) {
	// –í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ú–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã¬ª
	bot.hears(MENU_LABELS.GROUPS, async (ctx) => {
		await renderGroupsRoot(ctx);
	});

	// ¬´üìÖ –ü–æ –¥–Ω—è–º¬ª
	bot.hears(SMALL_GROUPS_TEXTS.byDay, async (ctx) => {
		if (!ctx.session.menuStack) ctx.session.menuStack = ["groups"];
		ctx.session.menuStack.push("groups/byday");
		ctx.session.lastSection = "groups/byday";

		await ctx.reply(`*${SMALL_GROUPS_TEXTS.chooseDay}*`, {
			parse_mode: "Markdown",
			reply_markup: makeWeekdaysKeyboard(),
		});
	});

	// ¬´üìç –ü–æ —Ä–∞–π–æ–Ω–∞–º¬ª
	bot.hears(SMALL_GROUPS_TEXTS.byDistrict, async (ctx) => {
		if (!ctx.session.menuStack) ctx.session.menuStack = ["groups"];
		ctx.session.menuStack.push("groups/bydistrict");
		ctx.session.lastSection = "groups/bydistrict";

		await ctx.reply(`*${SMALL_GROUPS_TEXTS.chooseDistrict}*`, {
			parse_mode: "Markdown",
			reply_markup: makeDistrictsKeyboard(),
		});
	});

	// –í—ã–±–æ—Ä –¥–Ω—è ‚Üí —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
	bot.callbackQuery(/groups:day:(MON|TUE|WED|THU|FRI|SAT|SUN)/, async (ctx) => {
		const day = ctx.match![1] as Weekday;
		await ctx.answerCallbackQuery().catch(() => {});

		const list = SMALL_GROUPS.filter((g) => g.weekday === day);

		await ctx.reply(`*${WEEKDAY_TITLE[day]} ‚Äî –≥—Ä—É–ø–ø—ã:*`, {
			parse_mode: "Markdown",
			link_preview_options: { is_disabled: true },
		});

		for (let i = 0; i < list.length; i++) {
			const g = list[i];
			const isLast = i === list.length - 1;

			await ctx.reply(formatGroup(g), {
				parse_mode: "Markdown",
				link_preview_options: { is_disabled: true },
				reply_markup: isLast ? new InlineKeyboard().text("‚¨ÖÔ∏è –ö –¥–Ω—è–º", "groups:byday") : undefined,
			});
		}
	});

	// –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –¥–Ω–µ–π
	bot.callbackQuery("groups:byday", async (ctx) => {
		await ctx.answerCallbackQuery().catch(() => {});
		await ctx.reply(`*${SMALL_GROUPS_TEXTS.chooseDay}*`, {
			parse_mode: "Markdown",
			reply_markup: makeWeekdaysKeyboard(),
		});
	});

	// –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ ‚Üí —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
	bot.callbackQuery(/groups:district:(.+)/, async (ctx) => {
		const districtKey = ctx.match![1];
		const districtName = DISTRICT_MAP[districtKey] ?? districtKey;

		await ctx.answerCallbackQuery().catch(() => {});

		const list = SMALL_GROUPS.filter((g) => g.region === districtKey);

		await ctx.reply(`*${districtName} ‚Äî –≥—Ä—É–ø–ø—ã:*`, {
			parse_mode: "Markdown",
			link_preview_options: { is_disabled: true },
		});

		for (let i = 0; i < list.length; i++) {
			const g = list[i];
			const isLast = i === list.length - 1;

			await ctx.reply(formatGroup(g), {
				parse_mode: "Markdown",
				link_preview_options: { is_disabled: true },
				reply_markup: isLast ? new InlineKeyboard().text("‚¨ÖÔ∏è –ö —Ä–∞–π–æ–Ω–∞–º", "groups:bydistrict") : undefined,
			});
		}
	});

	// –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ä–∞–π–æ–Ω–æ–≤
	bot.callbackQuery("groups:bydistrict", async (ctx) => {
		await ctx.answerCallbackQuery().catch(() => {});
		await ctx.reply(`*${SMALL_GROUPS_TEXTS.chooseDistrict}*`, {
			parse_mode: "Markdown",
			reply_markup: makeDistrictsKeyboard(),
		});
	});

	// –ö–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞ –õ–ú–ì
	bot.hears(MENU_LABELS.LMG_NEXT, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		const nextLm = await withLoading(ctx, () => fetchNextEventByTitle("–í—Å—Ç—Ä–µ—á–∞ –õ–ú–ì"), {
			text: "‚è≥ –ò—â—É –±–ª–∏–∂–∞–π—à—É—é –≤—Å—Ç—Ä–µ—á—É –õ–ú–ì‚Ä¶",
		});

		if (!nextLm) {
			await ctx.reply(SMALL_GROUPS_TEXTS.noNextLmg);
			return;
		}
		await ctx.reply(formatEvent(nextLm), { parse_mode: "Markdown" });
	});

	// –í—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –õ–ú–ì –¥–æ –∫–æ–Ω—Ü–∞ —Å–µ–∑–æ–Ω–∞
	bot.hears(MENU_LABELS.LMG_ALL, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		const lmEvents = await withLoading(ctx, () => fetchAllFutureEventsByTitle("–í—Å—Ç—Ä–µ—á–∞ –õ–ú–ì"), {
			text: "‚è≥ –ü–æ–ª—É—á–∞—é –≤—Å–µ –±—É–¥—É—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –õ–ú–ì‚Ä¶",
		});

		if (lmEvents.length === 0) {
			await ctx.reply(SMALL_GROUPS_TEXTS.noFutureLmg);
			return;
		}
		const list = lmEvents.map((e) => formatEvent(e, true)).join("\n\n");
		await ctx.reply(`${SMALL_GROUPS_TEXTS.lmgSeasonList}\n\n${list}`, {
			parse_mode: "Markdown",
		});
	});

	// –í—ã–µ–∑–¥ –õ–ú–ì
	bot.hears(MENU_LABELS.LMG_TRIP, async (ctx) => {
		if (!requirePrivileged(ctx)) return;
		await ctx.reply("*–í—ã–µ–∑–¥ –õ–ú–ì*", {
			parse_mode: "Markdown",
			reply_markup: inlineLmgTrip,
		});
	});

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ ¬´–î–∞—Ç—ã –≤—ã–µ–∑–¥–∞¬ª
	bot.callbackQuery("lmg_trip_dates", async (ctx) => {
		if (!requirePrivileged(ctx)) return;
		const res = await withLoading(ctx, () => fetchHolidayEvent("–í—ã–µ–∑–¥ –õ–ú–ì"), {
			text: "üöå –ü—Ä–æ–≤–µ—Ä—è—é –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞‚Ä¶",
		});

		if (res.status === "not_found") {
			await ctx.answerCallbackQuery({ text: "–î–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã", show_alert: true });
			return;
		}

		const msg =
			res.status === "future"
				? formatEvent(res.event)
				: res.status === "past"
				? `–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–µ–∑–¥ –±—ã–ª:\n\n${formatEvent(res.event)}`
				: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–µ–∑–¥—É";

		await ctx.reply(msg, { parse_mode: "Markdown" });
		await ctx.answerCallbackQuery();
	});
}
