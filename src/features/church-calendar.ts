// src/features/church-calendar.ts
import { Bot } from "grammy";
import { MyContext } from "../types/grammy-context";
import {
	fetchUpcomingEvents,
	fetchNextEventByTitle,
	fetchAllFutureEventsByTitle,
	fetchHolidayEvent,
	formatEvent,
} from "../services/calendar";
import { MENU_LABELS } from "../constants/button-lables";

/**
 * üìå –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ—Ä–Ω—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–¶–µ—Ä–∫–æ–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å¬ª
 */
export async function renderCalendarRoot(ctx: MyContext) {
	ctx.session.lastSection = "calendar";
	ctx.session.menuStack = ["calendar"];

	await ctx.reply("üìÖ –¶–µ—Ä–∫–æ–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:", {
		reply_markup: {
			keyboard: [
				[MENU_LABELS.CALENDAR_MEMBERS, MENU_LABELS.CALENDAR_PRAYER],
				[MENU_LABELS.CALENDAR_LMG, MENU_LABELS.CALENDAR_FAMILY],
				[MENU_LABELS.CALENDAR_NEXT, MENU_LABELS.CALENDAR_HOLIDAYS],
				[MENU_LABELS.BACK],
			],
			resize_keyboard: true,
		},
	});
}

/**
 * üìå –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
 */
export function registerChurchCalendar(bot: Bot<MyContext>) {
	// --- –ö–æ—Ä–µ–Ω—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è ---
	bot.hears(MENU_LABELS.CALENDAR, async (ctx) => {
		await renderCalendarRoot(ctx);
	});

	// --- –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è ---
	bot.hears(MENU_LABELS.CALENDAR_NEXT, async (ctx) => {
		const events = await fetchUpcomingEvents(5);
		if (events.length === 0) {
			return ctx.reply("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.");
		}
		await ctx.reply("*–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:*\n\n" + events.map(formatEvent).join("\n\n"), {
			parse_mode: "Markdown",
		});
	});

	// === –õ–ú–ì ===
	bot.hears(MENU_LABELS.CALENDAR_LMG, async (ctx) => {
		ctx.session.menuStack.push("lmg");
		await ctx.reply("üìñ –õ–ú–ì:", {
			reply_markup: {
				keyboard: [
					[MENU_LABELS.LMG_NEXT, MENU_LABELS.LMG_ALL],
					[MENU_LABELS.BACK, MENU_LABELS.MAIN],
				],
				resize_keyboard: true,
			},
		});
	});

	bot.hears(MENU_LABELS.LMG_NEXT, async (ctx) => {
		const ev = await fetchNextEventByTitle("–ª–º–≥");
		if (!ev) return ctx.reply("–°–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏ –õ–ú–ì –ø–æ–∫–∞ –Ω–µ—Ç.");
		await ctx.reply("*–°–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞ –õ–ú–ì:*\n\n" + formatEvent(ev), { parse_mode: "Markdown" });
	});

	bot.hears(MENU_LABELS.LMG_ALL, async (ctx) => {
		const events = await fetchAllFutureEventsByTitle("–ª–º–≥");
		if (events.length === 0) return ctx.reply("–ë—É–¥—É—â–∏—Ö –≤—Å—Ç—Ä–µ—á –õ–ú–ì –ø–æ–∫–∞ –Ω–µ—Ç.");
		await ctx.reply(events.map(formatEvent).join("\n\n"), { parse_mode: "Markdown" });
	});

	// === –ú–æ–ª–∏—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω–∏—è ===
	bot.hears(MENU_LABELS.CALENDAR_PRAYER, async (ctx) => {
		ctx.session.menuStack.push("prayers");
		await ctx.reply("üôè –ú–æ–ª–∏—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω–∏—è:", {
			reply_markup: {
				keyboard: [
					[MENU_LABELS.PRAYER_NEXT, MENU_LABELS.PRAYER_ALL],
					[MENU_LABELS.BACK, MENU_LABELS.MAIN],
				],
				resize_keyboard: true,
			},
		});
	});

	bot.hears(MENU_LABELS.PRAYER_NEXT, async (ctx) => {
		const ev = await fetchNextEventByTitle("–º–æ–ª–∏—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ");
		if (!ev) return ctx.reply("–°–ª–µ–¥—É—é—â–µ–µ –º–æ–ª–∏—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.");
		await ctx.reply("*–°–ª–µ–¥—É—é—â–µ–µ –º–æ–ª–∏—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ:*\n\n" + formatEvent(ev), {
			parse_mode: "Markdown",
		});
	});

	bot.hears(MENU_LABELS.PRAYER_ALL, async (ctx) => {
		const events = await fetchAllFutureEventsByTitle("–º–æ–ª–∏—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ");
		if (events.length === 0) return ctx.reply("–ë—É–¥—É—â–∏—Ö –º–æ–ª–∏—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–±—Ä–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.");
		await ctx.reply(events.map(formatEvent).join("\n\n"), { parse_mode: "Markdown" });
	});

	// === –ß–ª–µ–Ω—Å–∫–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è ===
	bot.hears(MENU_LABELS.CALENDAR_MEMBERS, async (ctx) => {
		ctx.session.menuStack.push("members");
		await ctx.reply("üë• –ß–ª–µ–Ω—Å–∫–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è:", {
			reply_markup: {
				keyboard: [
					[MENU_LABELS.MEMBERS_NEXT, MENU_LABELS.MEMBERS_ALL],
					[MENU_LABELS.BACK, MENU_LABELS.MAIN],
				],
				resize_keyboard: true,
			},
		});
	});

	bot.hears(MENU_LABELS.MEMBERS_NEXT, async (ctx) => {
		const ev = await fetchNextEventByTitle("—á–ª–µ–Ω—Å–∫–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ");
		if (!ev) return ctx.reply("–°–ª–µ–¥—É—é—â–µ–µ —á–ª–µ–Ω—Å–∫–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.");
		await ctx.reply("*–°–ª–µ–¥—É—é—â–µ–µ —á–ª–µ–Ω—Å–∫–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ:*\n\n" + formatEvent(ev), {
			parse_mode: "Markdown",
		});
	});

	bot.hears(MENU_LABELS.MEMBERS_ALL, async (ctx) => {
		const events = await fetchAllFutureEventsByTitle("—á–ª–µ–Ω—Å–∫–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ");
		if (events.length === 0) return ctx.reply("–ë—É–¥—É—â–∏—Ö —á–ª–µ–Ω—Å–∫–∏—Ö —Å–æ–±—Ä–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.");
		await ctx.reply(events.map(formatEvent).join("\n\n"), { parse_mode: "Markdown" });
	});

	// === –ë–æ–ª—å—à–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ ===
	bot.hears(MENU_LABELS.CALENDAR_HOLIDAYS, async (ctx) => {
		ctx.session.menuStack.push("holidays");
		await ctx.reply("üéâ –ë–æ–ª—å—à–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:", {
			reply_markup: {
				keyboard: [
					[MENU_LABELS.HOLIDAY_RV, MENU_LABELS.HOLIDAY_EASTER],
					[MENU_LABELS.BACK, MENU_LABELS.MAIN],
				],
				resize_keyboard: true,
			},
		});
	});

	bot.hears(MENU_LABELS.HOLIDAY_RV, async (ctx) => {
		const year = new Date().getFullYear();
		const res = await fetchHolidayEvent("–†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π –≤—ã–µ–∑–¥");

		if (res.status === "not_found") {
			return ctx.reply(`–í ${year} –≥–æ–¥—É –†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π –≤—ã–µ–∑–¥ –µ—â—ë –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –≤ —Ü–µ—Ä–∫–æ–≤–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.`);
		}

		if (res.status === "past") {
			return ctx.reply(
				`–í —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É –†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π –≤—ã–µ–∑–¥ –µ—â—ë –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –≤ —Ü–µ—Ä–∫–æ–≤–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, –∞ –≤ ${year} –≥–æ–¥—É –æ–Ω –ø—Ä–æ—Ö–æ–¥–∏–ª:\n\n${formatEvent(
					res.event
				)}`,
				{ parse_mode: "Markdown" }
			);
		}

		if (res.status === "future") {
			return ctx.reply(`*–†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π –≤—ã–µ–∑–¥:*\n\n${formatEvent(res.event)}`, {
				parse_mode: "Markdown",
			});
		}
	});

	bot.hears(MENU_LABELS.HOLIDAY_EASTER, async (ctx) => {
		const year = new Date().getFullYear();
		const res = await fetchHolidayEvent("–ø–∞—Å—Ö–∞");

		if (res.status === "not_found") {
			return ctx.reply(`–í ${year} –≥–æ–¥—É –ü–∞—Å—Ö–∞ –µ—â—ë –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ü–µ—Ä–∫–æ–≤–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.`);
		}

		if (res.status === "past") {
			return ctx.reply(
				`–í —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É –ü–∞—Å—Ö–∞ –µ—â—ë –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ü–µ—Ä–∫–æ–≤–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, –∞ –≤ ${year} –≥–æ–¥—É –æ–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏–ª–∞:\n\n${formatEvent(
					res.event
				)}`,
				{ parse_mode: "Markdown" }
			);
		}

		if (res.status === "future") {
			return ctx.reply(`*–ü–∞—Å—Ö–∞:*\n\n${formatEvent(res.event)}`, {
				parse_mode: "Markdown",
			});
		}
	});

	// === –û—Ç—Ü—ã –∏ –¥–µ—Ç–∏ / –°—ë—Å—Ç—Ä—ã ===
	bot.hears(MENU_LABELS.CALENDAR_FAMILY, async (ctx) => {
		ctx.session.menuStack.push("family");
		await ctx.reply("üë®‚Äçüë©‚Äçüëß –û—Ç—Ü—ã –∏ –¥–µ—Ç–∏ / –°—ë—Å—Ç—Ä—ã:", {
			reply_markup: {
				keyboard: [
					[MENU_LABELS.FAMILY_NEXT, MENU_LABELS.FAMILY_ALL],
					[MENU_LABELS.BACK, MENU_LABELS.MAIN],
				],
				resize_keyboard: true,
			},
		});
	});

	bot.hears(MENU_LABELS.FAMILY_NEXT, async (ctx) => {
		const ev = await fetchNextEventByTitle("–æ—Ç—Ü—ã –∏ –¥–µ—Ç–∏");
		if (!ev) return ctx.reply("–°–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.");
		await ctx.reply("*–°–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞:*\n\n" + formatEvent(ev), { parse_mode: "Markdown" });
	});

	bot.hears(MENU_LABELS.FAMILY_ALL, async (ctx) => {
		const events = await fetchAllFutureEventsByTitle("–æ—Ç—Ü—ã –∏ –¥–µ—Ç–∏");
		if (events.length === 0) return ctx.reply("–ë—É–¥—É—â–∏—Ö –≤—Å—Ç—Ä–µ—á –ø–æ–∫–∞ –Ω–µ—Ç.");
		await ctx.reply(events.map(formatEvent).join("\n\n"), { parse_mode: "Markdown" });
	});
}
