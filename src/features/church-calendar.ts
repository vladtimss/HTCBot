import { Bot, InlineKeyboard } from "grammy";
import { MyContext } from "../types/grammy-context";
import {
	fetchUpcomingEvents,
	fetchNextEventByTitle,
	fetchAllFutureEventsByTitle,
	fetchHolidayEvent,
	formatEvent,
} from "../services/calendar";
import { MENU_LABELS } from "../constants/button-lables";
import { CALENDAR, COMMON } from "../services/texts";
import {
	replyCalendarMenu,
	replyCalendarLmgMenu,
	replyCalendarPrayerMenu,
	replyCalendarMembersMenu,
	replyCalendarHolidaysMenu,
	replyCalendarFamilyMenu,
	subscribeKeyboard,
} from "../utils/keyboards";
import { requirePrivileged } from "../utils/guards";
import { env } from "../config/env";
import { withLoading } from "../utils/loading";

/**
 * üìå –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ—Ä–Ω—è —Ä–∞–∑–¥–µ–ª–∞ ¬´–¶–µ—Ä–∫–æ–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å¬ª
 */
export async function renderCalendarRoot(ctx: MyContext) {
	ctx.session.lastSection = "calendar";
	ctx.session.menuStack = ["calendar"];

	await ctx.reply(`${CALENDAR.title}\n\n${COMMON.useButtonBelow}`, {
		reply_markup: replyCalendarMenu,
		parse_mode: "Markdown",
	});
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
 * @param ctx
 * @param title
 * @param body
 */
async function replyInstruction(ctx: MyContext, title: string, body: string) {
	if (!requirePrivileged(ctx)) return;

	await ctx.editMessageText(
		`*${title}*\n\n${body}\n\n*–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:*\n\n\`${env.CALENDAR_SUBSCRIBE_URL}\`\n`,
		{
			parse_mode: "Markdown",
			reply_markup: new InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "calendar:instructions"),
			link_preview_options: { is_disabled: true },
		}
	);
}
/**
 * üìå –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
 */
export function registerChurchCalendar(bot: Bot<MyContext>) {
	// --- –ö–æ—Ä–µ–Ω—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è ---
	bot.hears(MENU_LABELS.CALENDAR, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		await renderCalendarRoot(ctx);
	});

	// --- –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è ---
	bot.hears(MENU_LABELS.CALENDAR_NEXT, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		const events = await withLoading(ctx, () => fetchUpcomingEvents(5), {
			text: "‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫–∞–ª–µ–Ω–¥–∞—Ä—å‚Ä¶",
		});

		if (events.length === 0) {
			return ctx.reply(CALENDAR.noEvents);
		}
		await ctx.reply(CALENDAR.nextEventsTitle + "\n\n" + events.map((e) => formatEvent(e, true)).join("\n\n"), {
			parse_mode: "Markdown",
		});
	});

	// === –õ–ú–ì ===
	bot.hears(MENU_LABELS.CALENDAR_LMG, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		ctx.session.menuStack.push("lmg");
		await ctx.reply(`${CALENDAR.lmgTitle}\n\n${COMMON.useButtonBelow}`, {
			reply_markup: replyCalendarLmgMenu,
			parse_mode: "Markdown",
		});
	});

	bot.hears(MENU_LABELS.LMG_NEXT, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		const ev = await withLoading(ctx, () => fetchNextEventByTitle("–ª–º–≥"), {
			text: "‚è≥ –ò—â—É –±–ª–∏–∂–∞–π—à—É—é –≤—Å—Ç—Ä–µ—á—É –õ–ú–ì‚Ä¶",
		});
		if (!ev) return ctx.reply(CALENDAR.lmgNone);
		await ctx.reply(CALENDAR.lmgNext + "\n\n" + formatEvent(ev), { parse_mode: "Markdown" });
	});

	bot.hears(MENU_LABELS.LMG_ALL, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		const events = await withLoading(ctx, () => fetchAllFutureEventsByTitle("–ª–º–≥"), {
			text: "‚è≥ –ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –õ–ú–ì‚Ä¶",
		});
		if (events.length === 0) return ctx.reply(CALENDAR.lmgNoneAll);
		await ctx.reply(events.map((e) => formatEvent(e, true)).join("\n\n"), { parse_mode: "Markdown" });
	});

	// === –ú–æ–ª–∏—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω–∏—è ===
	bot.hears(MENU_LABELS.CALENDAR_PRAYER, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		ctx.session.menuStack.push("prayers");
		await ctx.reply(`${CALENDAR.prayersTitle}\n\n${COMMON.useButtonBelow}`, {
			reply_markup: replyCalendarPrayerMenu,
			parse_mode: "Markdown",
		});
	});

	bot.hears(MENU_LABELS.PRAYER_NEXT, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		const ev = await withLoading(ctx, () => fetchNextEventByTitle("–º–æ–ª–∏—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ"), {
			text: "‚è≥ –ò—â—É –±–ª–∏–∂–∞–π—à–µ–µ –º–æ–ª–∏—Ç–≤–µ–Ω–Ω–æ–µ‚Ä¶",
		});
		if (!ev) return ctx.reply(CALENDAR.prayersNone);
		await ctx.reply(CALENDAR.prayersNext + "\n\n" + formatEvent(ev), {
			parse_mode: "Markdown",
		});
	});

	bot.hears(MENU_LABELS.PRAYER_ALL, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		const events = await withLoading(ctx, () => fetchAllFutureEventsByTitle("–º–æ–ª–∏—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ"), {
			text: "‚è≥ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –º–æ–ª–∏—Ç–≤–µ–Ω–Ω—ã—Ö‚Ä¶",
		});
		if (events.length === 0) return ctx.reply(CALENDAR.prayersNoneAll);
		await ctx.reply(events.map((e) => formatEvent(e, true)).join("\n\n"), { parse_mode: "Markdown" });
	});

	// === –ß–ª–µ–Ω—Å–∫–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è ===
	bot.hears(MENU_LABELS.CALENDAR_MEMBERS, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		ctx.session.menuStack.push("members");
		await ctx.reply(`${CALENDAR.membersTitle}\n\n${COMMON.useButtonBelow}`, {
			reply_markup: replyCalendarMembersMenu,
			parse_mode: "Markdown",
		});
	});

	bot.hears(MENU_LABELS.MEMBERS_NEXT, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		const ev = await withLoading(ctx, () => fetchNextEventByTitle("—á–ª–µ–Ω—Å–∫–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ"), {
			text: "‚è≥ –ò—â—É –±–ª–∏–∂–∞–π—à–µ–µ —á–ª–µ–Ω—Å–∫–æ–µ‚Ä¶",
		});
		if (!ev) return ctx.reply(CALENDAR.membersNone);
		await ctx.reply(CALENDAR.membersNext + "\n\n" + formatEvent(ev), {
			parse_mode: "Markdown",
		});
	});

	bot.hears(MENU_LABELS.MEMBERS_ALL, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		const events = await withLoading(ctx, () => fetchAllFutureEventsByTitle("—á–ª–µ–Ω—Å–∫–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ"), {
			text: "‚è≥ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —á–ª–µ–Ω—Å–∫–∏—Ö‚Ä¶",
		});
		if (events.length === 0) return ctx.reply(CALENDAR.membersNoneAll);
		await ctx.reply(events.map((e) => formatEvent(e, true)).join("\n\n"), { parse_mode: "Markdown" });
	});

	// === –ë–æ–ª—å—à–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ ===
	bot.hears(MENU_LABELS.CALENDAR_HOLIDAYS, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		ctx.session.menuStack.push("holidays");
		await ctx.reply(`${CALENDAR.holidaysTitle}\n\n${COMMON.useButtonBelow}`, {
			reply_markup: replyCalendarHolidaysMenu,
			parse_mode: "Markdown",
		});
	});

	bot.hears(MENU_LABELS.HOLIDAY_RV, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		const year = new Date().getFullYear();
		const res = await withLoading(ctx, () => fetchHolidayEvent("–†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π –≤—ã–µ–∑–¥"), {
			text: "üéÑ –£—Ç–æ—á–Ω—è—é –¥–∞—Ç—ã –†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–æ–≥–æ –≤—ã–µ–∑–¥–∞‚Ä¶",
		});

		if (res.status === "not_found") {
			return ctx.reply(CALENDAR.rvNotPlanned(year));
		}
		if (res.status === "past") {
			return ctx.reply(CALENDAR.rvPast(year, formatEvent(res.event)), { parse_mode: "Markdown" });
		}
		if (res.status === "future") {
			return ctx.reply(CALENDAR.rvFuture(formatEvent(res.event)), { parse_mode: "Markdown" });
		}
	});

	bot.hears(MENU_LABELS.HOLIDAY_EASTER, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		const year = new Date().getFullYear();
		const res = await withLoading(ctx, () => fetchHolidayEvent("–ø–∞—Å—Ö–∞"), {
			text: "üê£ –°–≤–µ—Ä—è—é –¥–∞—Ç—ã –ü–∞—Å—Ö–∏‚Ä¶",
		});

		if (res.status === "not_found") {
			return ctx.reply(CALENDAR.easterNotPlanned(year));
		}
		if (res.status === "past") {
			return ctx.reply(CALENDAR.easterPast(year, formatEvent(res.event)), {
				parse_mode: "Markdown",
			});
		}
		if (res.status === "future") {
			return ctx.reply(CALENDAR.easterFuture(formatEvent(res.event)), { parse_mode: "Markdown" });
		}
	});

	// === –û—Ç—Ü—ã –∏ –¥–µ—Ç–∏ / –°—ë—Å—Ç—Ä—ã ===
	bot.hears(MENU_LABELS.CALENDAR_FAMILY, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		ctx.session.menuStack.push("family");
		await ctx.reply(`${CALENDAR.familyTitle}\n\n${COMMON.useButtonBelow}`, {
			reply_markup: replyCalendarFamilyMenu,
			parse_mode: "Markdown",
		});
	});

	bot.hears(MENU_LABELS.FAMILY_NEXT, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		const ev = await withLoading(ctx, () => fetchNextEventByTitle("–æ—Ç—Ü—ã –∏ –¥–µ—Ç–∏"), {
			text: "‚è≥ –ò—â—É –±–ª–∏–∂–∞–π—à—É—é –≤—Å—Ç—Ä–µ—á—É ¬´–û—Ç—Ü—ã –∏ –¥–µ—Ç–∏¬ª‚Ä¶",
		});
		if (!ev) return ctx.reply(CALENDAR.familyNone);
		await ctx.reply(CALENDAR.familyNext + "\n\n" + formatEvent(ev), { parse_mode: "Markdown" });
	});

	bot.hears(MENU_LABELS.FAMILY_ALL, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		const events = await withLoading(ctx, () => fetchAllFutureEventsByTitle("–æ—Ç—Ü—ã –∏ –¥–µ—Ç–∏"), {
			text: "‚è≥ –ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ¬´–û—Ç—Ü—ã –∏ –¥–µ—Ç–∏¬ª‚Ä¶",
		});
		if (events.length === 0) return ctx.reply(CALENDAR.familyNoneAll);
		await ctx.reply(events.map((e) => formatEvent(e, true)).join("\n\n"), { parse_mode: "Markdown" });
	});

	bot.hears(MENU_LABELS.CALENDAR_SUBSCRIBE, async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		await ctx.reply(CALENDAR.yourCalendarUsing, {
			parse_mode: "Markdown",
			reply_markup: subscribeKeyboard(),
		});
	});

	// –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—É—Ä–∫—Ü–∏–π
	bot.callbackQuery("calendar:instructions", async (ctx) => {
		if (!requirePrivileged(ctx)) return;

		await ctx.answerCallbackQuery().catch(() => {});

		await ctx.reply(CALENDAR.yourCalendarUsing, {
			parse_mode: "Markdown",
			reply_markup: subscribeKeyboard(),
		});
	});

	// ---------- –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å -------------

	bot.callbackQuery("calendar:sub:apple", async (ctx) => {
		await ctx.answerCallbackQuery().catch(() => {});
		await replyInstruction(ctx, "–ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî Apple", CALENDAR.subscribeInstructions.apple);
	});

	bot.callbackQuery("calendar:sub:google", async (ctx) => {
		await ctx.answerCallbackQuery().catch(() => {});
		await replyInstruction(ctx, "–ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî Google", CALENDAR.subscribeInstructions.google);
	});

	bot.callbackQuery("calendar:sub:yandex", async (ctx) => {
		await ctx.answerCallbackQuery().catch(() => {});
		await replyInstruction(ctx, "–ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî –Ø–Ω–¥–µ–∫—Å", CALENDAR.subscribeInstructions.yandex);
	});

	bot.callbackQuery("calendar:sub:xiomi", async (ctx) => {
		await ctx.answerCallbackQuery().catch(() => {});
		await replyInstruction(ctx, "–ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî Xiaomi / MIUI", CALENDAR.subscribeInstructions.xiaomi);
	});

	bot.callbackQuery("calendar:sub:other", async (ctx) => {
		await ctx.answerCallbackQuery().catch(() => {});
		await replyInstruction(ctx, "–ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî –î—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", CALENDAR.subscribeInstructions.other);
	});
}
