// src/services/calendar.ts
// ========================
// –†–∞–±–æ—Ç–∞ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º (CalDAV):
// - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É CalDAV
// - –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π
// - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
// - –ø–æ–∏—Å–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ –≤—Å—Ç—Ä–µ—á –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
// - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Telegram

import { createDAVClient, DAVCalendar, DAVObject } from "tsdav";
import ICAL from "ical.js";
import { compareAsc, isAfter, isBefore, isSameYear } from "date-fns";
import { env } from "../config/env";

export type HolidayEventResult =
	| { status: "future"; event: CalendarEvent } // —Å–æ–±—ã—Ç–∏–µ –µ—â—ë –≤–ø–µ—Ä–µ–¥–∏
	| { status: "past"; event: CalendarEvent } // —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ
	| { status: "not_found" }; // –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏

/** –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è */
export interface CalendarEvent {
	title: string;
	startsAt: Date;
	endsAt?: Date;
	location?: string;
	description?: string;
}

type TSDavClient = Awaited<ReturnType<typeof createDAVClient>>;
let cached: { client: TSDavClient; calendar: DAVCalendar } | null = null;

/**
 * –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç CalDAV –∏ –∏—â–µ–º –Ω—É–∂–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
 * –ö—ç—à–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤.
 */
export async function getCalendar(): Promise<{ client: TSDavClient; calendar: DAVCalendar }> {
	if (cached) return cached;

	const client = await createDAVClient({
		serverUrl: env.CALDAV_URL,
		credentials: {
			username: env.CALDAV_USERNAME,
			password: env.CALDAV_PASSWORD,
		},
		authMethod: "Basic",
		defaultAccountType: "caldav",
	});

	const calendars = await client.fetchCalendars();
	const calendar = calendars.find((c) => c.url === env.HTC_COMMON_CALENDAR_URL);
	if (!calendar) throw new Error("CalDAV calendar not found by HTC_COMMON_CALENDAR_URL");

	cached = { client, calendar };
	return cached;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è (VEVENT –∏ –¥—Ä.)
 */
export async function fetchCalendarObjects(): Promise<DAVObject[]> {
	const { client, calendar } = await getCalendar();
	const objs = await client.fetchCalendarObjects({ calendar });
	return (objs ?? []) as DAVObject[];
}

/**
 * –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º DAVObject ‚Üí —Å–ø–∏—Å–æ–∫ CalendarEvent
 */
export function parseDavObjectToEvents(obj: DAVObject): CalendarEvent[] {
	if (!obj?.data || typeof obj.data !== "string") return [];
	try {
		const jcal = ICAL.parse(obj.data);
		const comp = new ICAL.Component(jcal);
		const vevents = comp.getAllSubcomponents("vevent") as unknown as any[];

		return vevents
			.map((ve: any) => {
				const ev = new ICAL.Event(ve);
				const starts = ev.startDate ? ev.startDate.toJSDate() : undefined;
				if (!starts) return null;

				return {
					title: ev.summary || "–°–æ–±—ã—Ç–∏–µ",
					startsAt: starts,
					endsAt: ev.endDate ? ev.endDate.toJSDate() : undefined,
					location: ev.location || undefined,
					description: ev.description || undefined,
				} as CalendarEvent;
			})
			.filter(Boolean) as CalendarEvent[];
	} catch {
		return [];
	}
}

/**
 * –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ N —Å–æ–±—ã—Ç–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3).
 */
export async function fetchUpcomingEvents(limit = 5): Promise<CalendarEvent[]> {
	const objs = await fetchCalendarObjects();
	const allEvents = objs.flatMap(parseDavObjectToEvents);

	const now = new Date();
	return allEvents
		.filter((e) => isAfter(e.startsAt, now))
		.sort((a, b) => compareAsc(a.startsAt, b.startsAt))
		.slice(0, Math.max(0, limit));
}

/** –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è */
function capitalize(str: string): string {
	return str.charAt(0).toUpperCase() + str.slice(1);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫—É Telegram.
 * @param e - —Å–æ–±—ã—Ç–∏–µ
 * @param isList - –µ—Å–ª–∏ true ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–¥–ª—è —Å–ø–∏—Å–∫–æ–≤)
 * @param shouldShowYear - –µ—Å–ª–∏ true ‚Üí –≤—ã–≤–æ–¥–∏–º –≥–æ–¥ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (–¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤)
 */
export function formatEvent(e: CalendarEvent, isList = false, shouldShowYear = false): string {
	const startDate = e.startsAt;
	const endDate = e.endsAt ?? null;

	// –î–∞—Ç–∞: –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ + —á–∏—Å–ª–æ + –º–µ—Å—è—Ü
	const capitalize = (s: string) => s.charAt(0).toUpperCase() + s.slice(1);
	const dayStr = (d: Date) =>
		capitalize(
			d.toLocaleString("ru-RU", {
				weekday: "long",
				day: "numeric",
				month: "long",
			})
		);

	// –í—Ä–µ–º—è: —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
	const timeStr = (d: Date) =>
		d.toLocaleString("ru-RU", {
			hour: "2-digit",
			minute: "2-digit",
		});

	let dateStr: string;
	if (endDate && startDate.toDateString() !== endDate.toDateString()) {
		// –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –≤ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏
		dateStr = `${dayStr(startDate)}, ${timeStr(startDate)} ‚Äî ${dayStr(endDate)}, ${timeStr(endDate)}`;
	} else if (endDate) {
		// –û–¥–∏–Ω –¥–µ–Ω—å, –Ω–æ –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
		dateStr = `${dayStr(startDate)}, ${timeStr(startDate)} ‚Äî ${timeStr(endDate)}`;
	} else {
		// –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ
		dateStr = `${dayStr(startDate)}, ${timeStr(startDate)}`;
	}

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Å –≥–æ–¥–æ–º ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
	const title = shouldShowYear ? `‚ú® ${escapeMd(e.title)} (${startDate.getFullYear()})` : `‚ú® ${escapeMd(e.title)}`;

	// –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
	const descr = e.description ? `\nüìù ${e.description}` : "";

	// –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
	const card = [`*${title}*`, `*üóì ${dateStr}*`, descr].filter(Boolean).join("\n");

	return isList ? card + "\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" : card;
}

/** –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown */
function escapeMd(s: string): string {
	return s.replace(/([_*[\]()~`>#{.!])/g, "\\$1");
}

/**
 * –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
 * @param strict - –µ—Å–ª–∏ true, –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
 */
export async function fetchNextEventByTitle(title: string, strict = false): Promise<CalendarEvent | null> {
	const objs = await fetchCalendarObjects();
	const allEvents = objs.flatMap(parseDavObjectToEvents);

	const now = new Date();
	const filtered = allEvents
		.filter((e) =>
			strict ? e.title.toLowerCase() === title.toLowerCase() : e.title.toLowerCase().includes(title.toLowerCase())
		)
		.filter((e) => isAfter(e.startsAt, now))
		.sort((a, b) => compareAsc(a.startsAt, b.startsAt));

	return filtered[0] ?? null;
}

/**
 * –ù–∞–π—Ç–∏ –≤—Å–µ –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–æ –∫–æ–Ω—Ü–∞ —Å–µ–∑–æ–Ω–∞.
 * –°–µ–∑–æ–Ω = –¥–æ 31 –∏—é–ª—è.
 */
export async function fetchAllFutureEventsByTitle(title: string, strict = false): Promise<CalendarEvent[]> {
	const objs = await fetchCalendarObjects();
	const allEvents = objs.flatMap(parseDavObjectToEvents);

	const now = new Date();
	const seasonYear = now.getMonth() >= 7 ? now.getFullYear() + 1 : now.getFullYear();
	const seasonEnd = new Date(seasonYear, 6, 31, 23, 59, 59); // 31 –∏—é–ª—è

	return allEvents
		.filter((e) =>
			strict ? e.title.toLowerCase() === title.toLowerCase() : e.title.toLowerCase().includes(title.toLowerCase())
		)
		.filter((e) => isAfter(e.startsAt, now) && e.startsAt <= seasonEnd)
		.sort((a, b) => compareAsc(a.startsAt, b.startsAt));
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–∞—Å—Ö–∞, –†–í).
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
 * - future ‚Üí –≤–ø–µ—Ä–µ–¥–∏ –≤ —ç—Ç–æ–º –≥–æ–¥—É
 * - past ‚Üí —É–∂–µ –ø—Ä–æ—à–ª–æ –≤ —ç—Ç–æ–º –≥–æ–¥—É
 * - not_found ‚Üí –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
 */
export async function fetchHolidayEvent(
	title: string,
	options?: { strictYear?: boolean }
): Promise<HolidayEventResult> {
	const objs = await fetchCalendarObjects();
	const allEvents = objs.flatMap(parseDavObjectToEvents);

	const today = new Date();

	// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
	let events = allEvents.filter((e) => e.title.toLowerCase().includes(title.toLowerCase()));

	// –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω strictYear ‚Üí –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è —ç—Ç–æ–≥–æ –≥–æ–¥–∞
	if (options?.strictYear) {
		events = events.filter((e) => isSameYear(e.startsAt, today));
	}

	events = events.sort((a, b) => compareAsc(a.startsAt, b.startsAt));

	if (events.length === 0) {
		return { status: "not_found" };
	}

	// –°–º–æ—Ç—Ä–∏–º –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
	const future = events.find((e) => isAfter(e.startsAt, today));
	if (future) {
		return { status: "future", event: future };
	}

	// –ï—Å–ª–∏ –±—É–¥—É—â–∏—Ö –Ω–µ—Ç ‚Äî –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ—à–µ–¥—à–µ–µ
	const past = [...events].reverse().find((e) => isBefore(e.startsAt, today));
	if (past) {
		return { status: "past", event: past };
	}

	return { status: "not_found" };
}
