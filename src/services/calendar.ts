// src/services/calendar.ts
import { createDAVClient, DAVCalendar, DAVObject } from "tsdav";
import ICAL from "ical.js"; // –í–ê–ñ–ù–û: –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —É ical.js –Ω–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö export'–æ–≤ Component/Event/parse
import { compareAsc, isAfter } from "date-fns";
import { env } from "../config/env";

/** –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –±–æ—Ç–∞ */
export interface CalendarEvent {
	title: string;
	startsAt: Date;
	endsAt?: Date;
	location?: string;
	description?: string;
}

/** –¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞ tsdav —Ä–æ–≤–Ω–æ –∫–∞–∫ –µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç createDAVClient */
type TSDavClient = Awaited<ReturnType<typeof createDAVClient>>;

/** –ö–µ—à–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ */
let cached: { client: TSDavClient; calendar: DAVCalendar } | null = null;

/**
 * –°–æ–∑–¥–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ CalDAV –∏ –Ω–∞–π—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ URL –∏–∑ .env
 */
export async function getCalendar(): Promise<{ client: TSDavClient; calendar: DAVCalendar }> {
	if (cached) return cached;

	const client = await createDAVClient({
		serverUrl: env.CALDAV_URL,
		credentials: {
			username: env.CALDAV_USERNAME,
			password: env.CALDAV_PASSWORD,
		},
		authMethod: "Basic",
		defaultAccountType: "caldav",
	});

	const calendars = await client.fetchCalendars();
	const calendar = calendars.find((c) => c.url === env.HTC_COMMON_CALENDAR_URL);
	if (!calendar) {
		throw new Error("CalDAV calendar not found by HTC_COMMON_CALENDAR_URL");
	}

	cached = { client, calendar };
	return cached;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—ã—Ä—ã–µ –æ–±—ä–µ–∫—Ç—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è (ICS)
 */
export async function fetchCalendarObjects(): Promise<DAVObject[]> {
	const { client, calendar } = await getCalendar();
	const objs = await client.fetchCalendarObjects({ calendar });
	// –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö —Ç–∏–ø—ã –º–æ–≥—É—Ç –±—ã—Ç—å —à–∏—Ä–µ ‚Äî —è–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ DAVObject[]
	return (objs ?? []) as DAVObject[];
}

/**
 * –°–ø–∞—Ä—Å–∏—Ç—å –æ–¥–∏–Ω DAVObject (ICS) –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π ical.js -> CalendarEvent[]
 */
export function parseDavObjectToEvents(obj: DAVObject): CalendarEvent[] {
	// –í tsdav —É DAVObject.data –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å ‚Äî –∑–∞—â–∏—â–∞–µ–º—Å—è
	if (!obj?.data || typeof obj.data !== "string") return [];

	try {
		// 1) –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º ICS-—Ç–µ–∫—Å—Ç –≤ jCal-—Å—Ç—Ä—É–∫—Ç—É—Ä—É
		const jcal = ICAL.parse(obj.data);
		// 2) –ö–æ—Ä–Ω–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç VCALENDAR
		const comp = new ICAL.Component(jcal);
		// 3) –î–æ—Å—Ç–∞—ë–º –≤—Å–µ VEVENT
		const vevents = comp.getAllSubcomponents("vevent") as unknown as any[];

		// 4) –ú–∞–ø–ø–∏–º –∫–∞–∂–¥—ã–π VEVENT –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
		const events = vevents
			.map((ve: any) => {
				const ev = new ICAL.Event(ve);
				const starts = ev.startDate ? ev.startDate.toJSDate() : undefined;
				if (!starts) return null;

				return {
					title: ev.summary || "–°–æ–±—ã—Ç–∏–µ",
					startsAt: starts,
					endsAt: ev.endDate ? ev.endDate.toJSDate() : undefined,
					location: ev.location || undefined,
					description: ev.description || undefined,
				} as CalendarEvent;
			})
			.filter(Boolean) as CalendarEvent[];

		return events;
	} catch {
		// –ï—Å–ª–∏ ICS –ø–æ–≤—Ä–µ–∂–¥—ë–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
		return [];
	}
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å N –±–ª–∏–∂–∞–π—à–∏—Ö –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
 */
export async function fetchUpcomingEvents(limit = 3): Promise<CalendarEvent[]> {
	const objs = await fetchCalendarObjects();
	const allEvents = objs.flatMap(parseDavObjectToEvents);

	const now = new Date();
	const future = allEvents
		.filter((e) => isAfter(e.startsAt, now))
		.sort((a, b) => compareAsc(a.startsAt, b.startsAt))
		.slice(0, Math.max(0, limit));

	return future;
}

/**
 * –£–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Å–æ–±—ã—Ç–∏—è –≤ Markdown
 */
export function formatEvent(e: CalendarEvent): string {
	const date = e.startsAt.toLocaleString("ru-RU", { dateStyle: "short", timeStyle: "short" });
	const place = e.location ? `\nüìç ${e.location}` : "";
	const descr = e.description ? `\n‚Äî ${e.description}` : "";
	return `‚Ä¢ *${escapeMd(e.title)}*\nüïí ${date}${place}${descr}`;
}

/** –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —ç—Å–∫–µ–π–ø Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ */
function escapeMd(s: string): string {
	return s.replace(/([_*[\]()~`>#+\-=|{}.!\\])/g, "\\$1");
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –õ–ú–ì –¥–æ –∫–æ–Ω—Ü–∞ —Å–µ–∑–æ–Ω–∞ (—Å–µ–≥–æ–¥–Ω—è ‚Üí 31 –∏—é–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞)
 */
export async function fetchLmEventsUntilSeasonEnd(): Promise<CalendarEvent[]> {
	const objs = await fetchCalendarObjects();
	const allEvents = objs.flatMap(parseDavObjectToEvents);

	const now = new Date();
	// –µ—Å–ª–∏ —É–∂–µ –∞–≤–≥—É—Å—Ç, —Å—á–∏—Ç–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
	const seasonYear = now.getMonth() >= 7 ? now.getFullYear() + 1 : now.getFullYear();
	const seasonEnd = new Date(seasonYear, 6, 31, 23, 59, 59); // 31 –∏—é–ª—è

	return allEvents
		.filter((e) => e.title.toLowerCase().includes("–ª–º") && isAfter(e.startsAt, now) && e.startsAt <= seasonEnd)
		.sort((a, b) => compareAsc(a.startsAt, b.startsAt));
}
