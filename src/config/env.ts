import dotenv from "dotenv";
import { GroupAddress } from "../data/small-groups";
dotenv.config();

/** –ë–µ—Ä—ë–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏–Ω–∞—á–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É */
function required(name: string): string {
	const v = process.env[name];
	if (!v) throw new Error(`Missing env var: ${name}`);
	return v;
}

/** –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å —Ñ–æ–ª–±—ç–∫–æ–º */
function optional(key: string, fallback: string): string {
	return process.env[key] ?? fallback;
}

/** –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –≤–∏–¥–∞ "1,2,3" => number[] */
function parseNumberList(name: string): number[] {
	return (process.env[name] ?? "")
		.split(",")
		.map((s) => s.trim())
		.filter(Boolean)
		.map(Number);
}

/** –ü–∞—Ä—Å–µ—Ä base64-JSON –∏–∑ ENV (–¥–ª—è ¬´–∫—Ä–∞—Å–∏–≤—ã—Ö¬ª –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö json —á–µ—Ä–µ–∑ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ) */
function parseBase64Json<T>(name: string, fallback: T): T {
	const raw = process.env[name];
	if (!raw) return fallback;
	try {
		const json = Buffer.from(raw, "base64").toString("utf-8");
		return JSON.parse(json) as T;
	} catch {
		return fallback;
	}
}

/** –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–∞, —Ö—Ä–∞–Ω—è—â–∏–π—Å—è –≤ ENV (–∫–ª—é—á–æ–º –≤—ã—Å—Ç—É–ø–∞–µ—Ç id) */
type LeaderData = {
	firstName: string;
	lastName: string;
	phone: string;
	tgUserName?: string;
	tgId?: number | string;
};

export const env = {
	// üîê –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
	BOT_TOKEN: required("BOT_TOKEN"),
	CALDAV_URL: required("CALDAV_URL"),
	CALDAV_USERNAME: required("CALDAV_USERNAME"),
	CALDAV_PASSWORD: required("CALDAV_PASSWORD"),
	HTC_COMMON_CALENDAR_URL: required("HTC_COMMON_CALENDAR_URL"),
	SERMONS_PODSTER_URL: required("SERMONS_PODSTER_URL"),
	SERMONS_YANDEX_URL: required("SERMONS_YANDEX_URL"),

	// ‚öôÔ∏è –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
	START_IMAGE: optional("START_IMAGE", "assets/start.jpg"),
	CHANNEL_URL: optional("CHANNEL_URL", "https://t.me/"),
	YANDEX_MAP_URL: optional("YANDEX_MAP_URL", ""),

	// üë• –°–ø–∏—Å–∫–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	PRIVILEGED_USER_IDS: parseNumberList("PRIVILEGED_USER_IDS"),
	FOURTH_BUTTON_USER_IDS: parseNumberList("FOURTH_BUTTON_USER_IDS"),

	// ‚úÖ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ base64-JSON
	//   –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–º. scripts/encode-env.ts
	LEADERS: parseBase64Json<Record<string, LeaderData>>("LEADERS_JSON_BASE64", {}),
	GROUP_ADDRESSES: parseBase64Json<Record<string, GroupAddress[]>>("GROUP_ADDRESSES_JSON_BASE64", {}),
};
