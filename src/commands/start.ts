import { Composer, InlineKeyboard }         from 'grammy';
import { Command, ParseMode }               from "../enums/bot.enums";
import { startKeyboards }                   from "../keyboards/start.keyboards";
import {
	CHURCH_TG_CHANNEL,
	SUNDAY_WORSHIP_INFO,
	UPCOMING_CHURCH_EVENTS
}                                           from "../strings/keyboards/start.keyboards.strings";
import { Divider }                          from "../ui-elements/html.elements";
import { log }                              from "../middlewares/logger";
import { HTC_TG_CHANNEL_LINK }              from "../constants/links.constants";
import { generateCalendarEventMessage }     from "../messages/calendar.messages";
import { getUpcomingCalendarEvents }        from "../helpers/calendar.helpers";
import { generateSundayWorshipInfoMessage } from "../messages/church-info.messages";

const composer = new Composer();

composer.command(Command.START, (ctx) => {
	if (!ctx.from) {
		return;
	}
	const firstName = ctx.from.first_name;
	const text = `–ü–æ–º–æ—â–Ω–∏–∫ –¶–µ—Ä–∫–≤–∏ –°–≤—è—Ç–æ–π –¢—Ä–æ–∏—Ü—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—Å${firstName.length ? ` *${firstName}*` : ''}\\!`;

	return ctx.reply(text, {
		reply_markup: startKeyboards,
		parse_mode: ParseMode.MarkdownV2
	});
});

composer.hears([CHURCH_TG_CHANNEL, SUNDAY_WORSHIP_INFO, UPCOMING_CHURCH_EVENTS], async (ctx) => {
	switch (ctx.message.text) {
		case SUNDAY_WORSHIP_INFO:
			await ctx.reply(generateSundayWorshipInfoMessage(), {
				parse_mode: ParseMode.HTML
			});

			const inlineKeyboard = new InlineKeyboard()
				.text('–î–∞', "yesOption")
				.text('–ù–µ—Ç', "noOption");

			return await ctx.reply("–•–æ—Ç–∏—Ç–µ, —è –ø–æ–ø—Ä–æ–±—É—é –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è –≤–∞—Å –º–∞—Ä—à—Ä—É—Ç?", {
				reply_markup: inlineKeyboard,
			});
		case CHURCH_TG_CHANNEL:
			return await ctx.reply('–ü–æ—Å–µ—Ç–∏—Ç–µ –∫–∞–Ω–∞–ª —Ü–µ—Ä–∫–≤–∏', {
				reply_markup: new InlineKeyboard().url(
					'–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª',
					HTC_TG_CHANNEL_LINK
				),
				parse_mode: ParseMode.HTML
			});
		case UPCOMING_CHURCH_EVENTS:
			const upcomingCalendarEvents = await getUpcomingCalendarEvents(3);

			const reply = upcomingCalendarEvents
				.map(event => generateCalendarEventMessage(event))
				.join(`${Divider}\n`);

			return await ctx.reply(reply, { parse_mode: ParseMode.HTML })
	}
})

composer.callbackQuery("noOption", async (ctx) => {
	await ctx.answerCallbackQuery();

	await ctx.reply("–•–æ—Ä–æ—à–æ üòä. –ë—É–¥–µ–º —Ä–∞–¥—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —Å–æ–±—Ä–∞–Ω–∏–∏ ü•∞");
});

composer.callbackQuery("yesOption", async (ctx) => {
	await ctx.answerCallbackQuery();

	return await ctx.reply('–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç', {
		reply_markup: new InlineKeyboard().url(
			'–û—Ç–∫—Ä—ã—Ç—å –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä',
			'https://yandex.ru/navi?rtext=55.485407,37.275574~55.510665,37.349650&rtt=auto'
		),
		parse_mode: ParseMode.HTML
	});

});

composer.on('message:text', async (ctx) => {
	log('some')
	return ctx.reply(`${ctx.from.first_name}, —è –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.`)
});

export default composer;
